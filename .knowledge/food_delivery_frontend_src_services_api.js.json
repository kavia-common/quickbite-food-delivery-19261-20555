{"is_source_file": true, "format": "JavaScript", "description": "This file provides an API service layer for the Food Delivery frontend application. It defines functions to fetch restaurant data, fetch menus, manage a shopping cart, place orders, check order status, and process payments. It uses environment variables for API base URL and falls back to mock data when the API base is not configured, ensuring functionality even in offline or testing scenarios.", "external_files": ["../mockData"], "external_methods": [], "published": ["fetchRestaurants", "fetchMenu", "createCart", "updateCart", "placeOrder", "getOrderStatus", "processPayment"], "classes": [], "methods": [{"name": "http(path, options = {})", "description": "A utility function to perform HTTP requests, handling errors and parsing JSON responses.", "scope": "", "scopeKind": ""}, {"name": "fetchRestaurants(params = {})", "description": "Fetches a list of restaurants from the API or mock data if the API is unavailable, with optional filtering by category and query.", "scope": "", "scopeKind": ""}, {"name": "fetchMenu(restaurantId)", "description": "Retrieves menu items for a specific restaurant, falling back to mock data if offline.", "scope": "", "scopeKind": ""}, {"name": "createCart()", "description": "Creates or retrieves a shopping cart session, with fallback to mock cart identifier.", "scope": "", "scopeKind": ""}, {"name": "updateCart(cartId, payload)", "description": "Updates cart items or metadata, with local fallback handling.", "scope": "", "scopeKind": ""}, {"name": "placeOrder(cartId, details)", "description": "Submits an order for the current cart, with fallback handling to simulate order placement.", "scope": "", "scopeKind": ""}, {"name": "getOrderStatus(orderId)", "description": "Fetches the status of an order, with simulated status updates if offline.", "scope": "", "scopeKind": ""}, {"name": "processPayment(orderId, payment)", "description": "Handles payment processing, with mock success response if API is unavailable or invalid payment details.", "scope": "", "scopeKind": ""}], "calls": ["fetch", "new URLSearchParams", "json()", "throw new Error", "mockRestaurants.filter", "mockMenus[restaurantId]", "http", "Date.now()"], "search-terms": ["api.js", "Food Delivery frontend", "fetchRestaurants", "mockData", "API service layer", "order processing", "cart management", "payment processing", "mock fallback"], "state": 2, "file_id": 16, "knowledge_revision": 33, "git_revision": "", "ctags": [{"_type": "tag", "name": "BASE", "path": "/home/kavia/workspace/code-generation/quickbite-food-delivery-19261-20555/food_delivery_frontend/src/services/api.js", "pattern": "/^const BASE = process.env.REACT_APP_API_BASE || '';$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "createCart", "path": "/home/kavia/workspace/code-generation/quickbite-food-delivery-19261-20555/food_delivery_frontend/src/services/api.js", "pattern": "/^export async function createCart() {$/", "language": "JavaScript", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "fetchMenu", "path": "/home/kavia/workspace/code-generation/quickbite-food-delivery-19261-20555/food_delivery_frontend/src/services/api.js", "pattern": "/^export async function fetchMenu(restaurantId) {$/", "language": "JavaScript", "kind": "function", "signature": "(restaurantId)"}, {"_type": "tag", "name": "fetchRestaurants", "path": "/home/kavia/workspace/code-generation/quickbite-food-delivery-19261-20555/food_delivery_frontend/src/services/api.js", "pattern": "/^export async function fetchRestaurants(params = {}) {$/", "language": "JavaScript", "kind": "function", "signature": "(params = {})"}, {"_type": "tag", "name": "getOrderStatus", "path": "/home/kavia/workspace/code-generation/quickbite-food-delivery-19261-20555/food_delivery_frontend/src/services/api.js", "pattern": "/^export async function getOrderStatus(orderId) {$/", "language": "JavaScript", "kind": "function", "signature": "(orderId)"}, {"_type": "tag", "name": "http", "path": "/home/kavia/workspace/code-generation/quickbite-food-delivery-19261-20555/food_delivery_frontend/src/services/api.js", "pattern": "/^async function http(path, options = {}) {$/", "language": "JavaScript", "kind": "function", "signature": "(path, options = {})"}, {"_type": "tag", "name": "placeOrder", "path": "/home/kavia/workspace/code-generation/quickbite-food-delivery-19261-20555/food_delivery_frontend/src/services/api.js", "pattern": "/^export async function placeOrder(cartId, details) {$/", "language": "JavaScript", "kind": "function", "signature": "(cartId, details)"}, {"_type": "tag", "name": "processPayment", "path": "/home/kavia/workspace/code-generation/quickbite-food-delivery-19261-20555/food_delivery_frontend/src/services/api.js", "pattern": "/^export async function processPayment(orderId, payment) {$/", "language": "JavaScript", "kind": "function", "signature": "(orderId, payment)"}, {"_type": "tag", "name": "updateCart", "path": "/home/kavia/workspace/code-generation/quickbite-food-delivery-19261-20555/food_delivery_frontend/src/services/api.js", "pattern": "/^export async function updateCart(cartId, payload) {$/", "language": "JavaScript", "kind": "function", "signature": "(cartId, payload)"}], "hash": "097fd47ae902b6611b1079c3646b185c", "format-version": 4, "code-base-name": "food_delivery_frontend", "filename": "food_delivery_frontend/src/services/api.js", "revision_history": [{"33": ""}]}